#!/usr/bin/env python

'''
Send a grasp precompute goal

Usage:
  send_goal [--frame=FRAME] left  <x> <y> <z> [<roll> <pitch> <yaw>]
  send_goal [--frame=FRAME] right <x> <y> <z> [<roll> <pitch> <yaw>]
  send_goal cancel
  send_goal -h | --help

Options:
  -h --help      Show this screen.
  --frame=FRAME  Which frame the coordinate is specified in [default: base_link]
'''

from docopt import docopt
import rospy
import actionlib

from std_msgs.msg import Header
from tue_manipulation_msgs.msg import GraspPrecomputeAction, GraspPrecomputeGoal, cart_pos


class GraspPrecompute():

    def __init__(self):
        self.action_client = actionlib.SimpleActionClient("amigo/left_arm/grasp_precompute", GraspPrecomputeAction)
        self.action_client.feedback_cb = self.feedback_cb

        self.action_client.wait_for_server()
        rospy.loginfo("Connected to action server")

    def build_goal(self, link_name, position, frame_id):
      pos = cart_pos(Header(frame_id=frame_id), *position)
      goal = GraspPrecomputeGoal(goal=pos)
      return goal

    def send_goal(self, goal):
        rospy.loginfo("Sending goal...")
        print goal

        rospy.loginfo("Waiting for result...")
        self.action_client.send_goal(goal,
            done_cb=None, active_cb=None, feedback_cb=self.feedback_cb)

    def wait_for_result(self):
        finished = False
        try:
            finished = self.action_client.wait_for_result()
        except KeyboardInterrupt:
            print "Canceling goal..."
            self.action_client.cancel_goal()
            self.action_client.wait_for_result(rospy.Duration(0.5))
        if not finished:
            return

        rospy.loginfo("Result!")
        result = self.action_client.get_result()
        print result

    last_feedback = None
    def feedback_cb(self, feedback):
        code = feedback.status_code.status
        if code != self.last_feedback:
            print 'feedback!!!', code
            self.last_feedback = code


if __name__ == '__main__':
    arguments = docopt(__doc__, options_first=True)
    print arguments

    try:
        # disable signals so we can detect a KeyboardInterrupt
        rospy.init_node('cartesionmotionobjective', anonymous=True, disable_signals=True)

        if arguments['cancel']:
            gp = GraspPrecompute()
            gp.action_client.cancel_all_goals()
            gp.action_client.wait_for_server()

        elif arguments['left'] or arguments['right']:

            for side in ['left', 'right']:
                if arguments[side]:
                    link_name = "grippoint_" + side
                    break

            position = (
                float(arguments['<x>']) ,
                float(arguments['<y>']) ,
                float(arguments['<z>']) )
            if arguments['<roll>']:
                orientation = (
                    float(arguments['<roll>' ]) ,
                    float(arguments['<pitch>']) ,
                    float(arguments['<yaw>'  ]) )
            else:
                orientation = (float('nan'), float('nan'), float('nan'))
            frame_id = arguments['--frame']

            print 'creating motion objective...'
            gp = GraspPrecompute()
            print 'sending goal...'
            gp.send_goal(gp.build_goal(link_name=link_name,
                                       position=position + orientation,
                                       frame_id=frame_id))
            print 'waiting for result...'
            gp.wait_for_result()

    except KeyboardInterrupt:
        print "program interrupted before completion"
